<?xml version="1.0"?>

<project name="test" default="startTest" basedir=".">
	<property name="testSuitePackagesPath" value="${testDir}"/>
	
	<target name="prepareTest" >	
	  <exec dir="${basedir}/containers/microservices-runtime" executable="/bin/sh" osfamily="unix" vmlauncher="false" failonerror="true" >
			<!--<arg line="./prepareTests.sh" />-->
			<arg line="/usr/bin/docker cp $( docker ps -q | grep xxx ):/opt/softwareag/common/lib/ext/enttoolkit.jar ../../lib" />
	  </exec>
	  
	  	  <exec dir="${basedir}/containers/microservices-runtime" executable="/bin/sh" osfamily="unix" vmlauncher="false" failonerror="true" >
			<!--<arg line="./prepareTests.sh" />-->
			<arg line="/usr/bin/docker cp $( docker ps -q | grep xxx ):/opt/softwareag/common/lib/glassfish/gf.jakarta.mail.jar ../../lib" />
	  </exec>
	  
	  	  <exec dir="${basedir}/containers/microservices-runtime" executable="/bin/sh" osfamily="unix" vmlauncher="false" failonerror="true" >
			<!--<arg line="./prepareTests.sh" />-->
			<arg line="/usr/bin/docker cp $( docker ps -q | grep xxx ):/opt/softwareag/common/lib/wm-isclient.jar ../../lib" />
	  </exec>
	  
	  	  <exec dir="${basedir}/containers/microservices-runtime" executable="/bin/sh" osfamily="unix" vmlauncher="false" failonerror="true" >
			<!--<arg line="./prepareTests.sh" />-->
			<arg line="/usr/bin/docker cp $( docker ps -q | grep xxx ):/opt/softwareag/IntegrationServer/lib/wm-isserver.jar ../../lib" />
	  </exec>
	  
	
	  <waitfor maxwait="3" maxwaitunit="minute" checkevery="500">
	    <http url="https://${testISHost}:${testISPort}"/>
      </waitfor>
		
	</target>	
	
	
	<target name="startTest" depends="prepareTest" >		
	  
	  
	  <var name="failedTestList" value=""/>
		
                <!-- interate over the test project and triiger all xml tests in the setup folder -->
                <for param="testProject" keepgoing="true" trim="true">
			<path>
				<dirset dir="${testSuitePackagesPath}" includes="*" excludes=".*,replicate" />
			</path>
			<sequential>
				<trycatch reference="exception_ref">
					<try>
                        <echo message="@{testProject}"/>
						<antcall target="junitTestAndReportXML">
							<param name="testPackageName" value="@{testProject}" />
						</antcall>
					</try>
					<catch>
						<echo message="JUnit test for package '@{testProject}' failed" />
						<var name="failedTestList" value="${failedTestList}'@{testProject}', " />
						<property name="testFail" refid="exception_ref" />
					</catch>
				</trycatch>
			</sequential>
		</for>



		
		<if>
			<not>
				<equals arg1="${failedTestList}" arg2="" trim="true" />
			</not>
			<then>
				<fail message="At least one test failed. Failed packages: ${failedTestList}" />
			</then>
			<else>
				<echo message="All JUnit Tests passed."/>
			</else>
		</if>
	</target>

	<target name="junitInitTest">
		<echo message="Init JUnit tests for package ${testPackageName}" />
		
		<property name="testPackageReportsDir" value="${testPackageName}/resources/reports" />
	</target>
	
	<target name="junitCleanUp">
		<delete dir="${testPackageReportsDir}" />								
	</target>
	

	<!--execute only if the XML Test directory exists in the test package -->
	<target name="junitTestAndReportXML" depends="junitInitTest,junitCleanUp">
		<echo message="Starting JUnit tests for package '${testPackageName}'"/>
		
		<path id="junitClasspath">
			<fileset dir="./lib" includes="*.jar" />
		</path>	
	  
		<mkdir dir="${testPackageReportsDir}" />

		<property name="resourcesFolder" value="${testPackageName}/resources" />
		
		<for param="testSetupFile" keepgoing="true">
			<path>
				<fileset dir="${testPackageName}" includes="**/setup/*.xml" />
			</path>
			<sequential>
				<basename property="fileBasename" file="@{testSetupFile}" suffix=".xml" />
				<echo message="Running JUnit test '@{testSetupFile}'"/>
				<pathconvert property="classpathProp" refid="junitClasspath"/>

				<echo>Classpath is ${classpathProp}</echo>
				<junit printsummary="yes" haltonfailure="no" fork="true" failureproperty="test:failure" enabletestlistenerevents="true" dir="${testPackageName}">
					<jvmarg value="-DwebMethods.integrationServer.name=${testISHost}" />
					<jvmarg value="-DwebMethods.integrationServer.port=${testISPort}" />
					<jvmarg value="-DwebMethods.integrationServer.userid=${testISUsername}" />
					<jvmarg value="-DwebMethods.integrationServer.password=${testISPassword}" />
					<jvmarg value="-DwebMethods.test.setup.filename=@{testSetupFile}" />
					<classpath>
						<path refid="junitClasspath" />
					</classpath>
					<formatter type="xml" />
					<formatter type="plain" usefile="false" /> <!-- to screen -->
					<test name="com.wm.ps.test.WmTestSuite" outfile="TEST-${fileBasename}" haltonerror="false" haltonfailure="false" todir="${testPackageReportsDir}" />
				</junit>
				<replaceregexp file="${testPackageReportsDir}/TEST-${fileBasename}.xml" match=" name=&quot;com.wm.ps.test.WmTestSuite&quot; " replace=" name=&quot;com.wm.ps.test.WmTestSuite [${fileBasename}]&quot; " />												
				<var name="fileBasename" unset="true" />
			</sequential>
		</for>

		
		<!-- if jenkins report dir is set publicate results there-->
		<antcall target="junitCopyResultsToReportsDir">
			<param name="current.report.dir" value="${testPackageReportsDir}" />
		</antcall>
		
		
		<!-- create HTML report of the test results -->
		<junitreport todir="${testPackageReportsDir}">
			<fileset dir="${testPackageReportsDir}">
				<include name="TEST-*.xml" />
				<exclude name="TESTS-TestSuites.xml" />
			</fileset>
			<report format="frames" todir="${testPackageReportsDir}/html" />
		</junitreport>

		<fail if="test:failure">Unit test failure</fail>
	</target>





	<!-- if jenkins report dir is set publicate results there-->
	<target name="junitCopyResultsToReportsDir">
		<echo message="Copying JUnit test results to folder '${reportDir}'"/>
		<copy todir="${reportDir}">
			<fileset dir="${current.report.dir}">
				<include name="*.*" />
				<exclude name="TESTS-TestSuites.xml"/>
			</fileset>
		</copy>
	</target>
	
	
</project>
