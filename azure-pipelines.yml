# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    cd containers/microservices-runtime
    git clone https://github.com/YanaSimeonova/webmethods-sample-project-layout.git
  displayName: 'Clone asset repo'

- task: Docker@2
  inputs:
    containerRegistry: 'dockehub'
    command: 'login'
- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: '$(Build.SourcesDirectory)/containers/docker-compose.yml'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'config'
- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: '$(Build.SourcesDirectory)/containers/docker-compose.yml'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'build'
    arguments: 'microservices-runtime'
- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: '$(Build.SourcesDirectory)/containers/docker-compose.yml'
    action: 'Run services'
    buildImages: false
    arguments: 'microservices-runtime'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      CONTAINER_ID=`docker ps -q`
      docker exec -it $CONTAINER_ID ls -lR
      docker cp $CONTAINER_ID:/opt/softwareag/common/lib/ext/enttoolkit.jar .
      docker cp $CONTAINER_ID:/opt/softwareag/common/lib/glassfish/gf.jakarta.mail.jar .
      docker cp $CONTAINER_ID:/opt/softwareag/common/lib/wm-isclient.jar .
      docker cp $CONTAINER_ID:/opt/softwareag/IntegrationServer/lib/wm-isserver.jar .
      pwd
      ls -lR
      until curl -u Administrator:manage -s http://`hostname`:5555/ 
      do 
        sleep 5
      done
  displayName: 'Wait for IS to start'
- task: Ant@1
  inputs:
      buildFile: 'build.xml'
      options: ' -DtestISHost=localhost -DtestISPort=5555 -DtestISUsername=Administrator -DtestISPassword=manage -DprojectName=webmethods-sample-project-layout -DtestDir=./containers/microservices-runtime/webmethods-sample-project-layout/assets/IS/Tests'
      targets: 'test'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'